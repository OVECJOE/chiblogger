{"version":3,"file":"static/js/906.4145f145.chunk.js","mappings":"2PA2BA,MAzBA,SACIA,EAAeC,EACfC,GACD,IADWC,EACZ,uDADoB,IAElB,GAA0BC,EAAAA,EAAAA,UAAS,GAAnC,eAAOC,EAAP,KAAcC,EAAd,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAQC,YAAW,WAEP,IAAVJ,GAAaL,EAAcE,GAC/BI,EAAS,KACVH,GAMH,OAFc,IAAVE,GAAaJ,EAAcC,GAExB,kBAAMQ,aAAaF,MAG3B,CAACH,EAAOH,IAEJ,kBAAMI,GAAS,SAAAK,GAAI,OAAIA,EAAO,O,SCoKzC,EAhLsB,WAClB,OAAmDC,EAAAA,EAAAA,YAAWC,EAAAA,GAAtDC,EAAR,EAAQA,cAAeC,EAAvB,EAAuBA,wBACfC,GAAsBJ,EAAAA,EAAAA,YAAWK,EAAAA,GAAjCD,kBACAE,GAAaN,EAAAA,EAAAA,YAAWO,EAAAA,GAAxBD,SACFE,GAAWC,EAAAA,EAAAA,MAEjB,GAA0DjB,EAAAA,EAAAA,UAAS,IAAnE,eAAOkB,EAAP,KAA8BC,EAA9B,KACA,GAA8BnB,EAAAA,EAAAA,UAAS,IAAvC,eAAOoB,EAAP,KAAgBC,EAAhB,KACA,GAAsBrB,EAAAA,EAAAA,UAAS,IAA/B,eAAOsB,EAAP,KAAYC,EAAZ,KAEMC,EAAS,CACXC,QAAS,CACL,eAAgB,mBAChBC,cAAc,UAAD,OAAYZ,EAASa,SAapCC,EAAe,SAACC,GAAD,OAAOR,EAAWQ,EAAEC,OAAOC,QA0B1CC,EAAcC,GAzBE,SAACC,GACnBC,IAAAA,IAAA,6BAAgCD,EAAhC,SAA2C,GAAIV,GAC1CY,MAAK,SAAAC,GACF1B,EAAwB,CACpB2B,KAAM,sBACNC,aAAcF,EAAIG,OAEtBxB,EAAS,4BAAD,OAA6BkB,OAExCO,OAAM,SAAAC,GAAG,OAAIC,EAAAA,EAAAA,IAAUD,EAAK9B,SAEf,SAACsB,GACnBC,IAAAA,OAAA,6BAAmCD,GAAMV,GACpCY,MAAK,SAAAC,GACF1B,EAAwB,CACpB2B,KAAM,sBACNJ,GAAIG,EAAIG,KAAKI,MAEjBhC,EAAkB,CACd0B,KAAM,cACNO,QAAQ,6CAAD,OAA+CX,EAA/C,UAEZO,OAAM,SAAAC,GAAG,OAAIC,EAAAA,EAAAA,IAAUD,EAAK9B,QAGmCU,GA+C1E,OA5BAnB,EAAAA,EAAAA,YAAU,WACN,OAAQiB,GACJ,IAAK,GACDD,EAAyBT,GACzB,MACJ,IAAK,SACDS,EAAyBT,EAAcoC,QACnC,SAAAP,GAAY,OAAIA,EAAaQ,WAEjC,MACJ,IAAK,SACD5B,EAAyBT,EAAcoC,QACnC,SAAAP,GAAY,OAAKA,EAAaQ,WAElC,MACJ,QACI,IACI,IAAMC,EAAUtC,EAAcoC,QAAO,SAAAP,GACjC,OAxEgB,SAACU,EAAG7B,GAAa,IAAD,QAC1C8B,EAAI9B,EAAQ+B,cAElB,OAAO,UAAAF,EAAEJ,QAAQM,cAAcC,MAAMF,UAA9B,eAAkCG,QAAS,IAC9C,UAAAJ,EAAEK,UAAUH,cAAcC,MAAMF,UAAhC,eAAoCG,QAAS,IAC7C,UAAAJ,EAAEM,MAAMJ,cAAcC,MAAMF,UAA5B,eAAgCG,QAAS,IACzC,UAAAJ,EAAEO,SAASL,cAAcC,MAAMF,UAA/B,eAAmCG,QAAS,EAkEzBI,CAA4BlB,EAAcnB,MAErDD,EAAyB6B,GAC3B,MAAON,IACLC,EAAAA,EAAAA,IAAUD,EAAK9B,OAI5B,CAACQ,EAASV,KAGT,qBAASgD,UAAU,0BAAnB,WACI,iBAAKA,UAAU,oBAAf,WACI,2CACA,kBAAMA,UAAU,aAAhB,WACI,kBACIpB,KAAK,SACLqB,YAAY,oCACZC,KAAK,UACL7B,MAAOX,EACPyC,SAAUjC,KAEd,oBAAQgC,KAAK,UAAUC,SAAUjC,EAC7BG,MAAOX,EADX,WAGI,mBAAQW,MAAM,GAAd,kBAGA,mBAAQA,MAAM,SAAd,qBAGA,mBAAQA,MAAM,SAAd,8BAMZ,eAAG2B,UAAU,qBAAb,WACI,0BAAOxC,EAAsBmC,SAAe,IADhD,oBAIA,cAAGK,UAAU,UAAb,0GAIA,iBAAKA,UAAU,qBAAf,UACKxC,EAAsB4C,KAAI,SAAAvB,GACvB,OACI,qBACImB,UAAS,6BAAwBnB,EAAaQ,QAAU,UAExDgB,QAAS,WACLxC,EAAOgB,EAAaK,KACpBZ,KALR,WAQI,iBAAK0B,UAAU,cAAf,WACI,iBAAMA,UAAU,OAAhB,SAAwBnB,EAAae,aACrC,cAAGU,KAAI,iBAAYzB,EAAagB,OAASG,UAAU,QAAnD,SACKnB,EAAagB,YAGtB,uBAAYG,UAAU,kBAAtB,SACKnB,EAAaM,WAElB,sCACQN,EAAaiB,SAASS,MAAM,KAAK,GADzC,OAEK1B,EAAaiB,SAASS,MAAM,KAAK,GAAGA,MAAM,KAAK,GAAGC,MAAM,EAAG,QAjB3D3B,EAAaK,SAsB5B1B,EAAsBmC,SACpB,eAAGK,UAAU,kBAAb,iBACO,iBAAMA,UAAU,mBAAhB,SACe,WAAZtC,GAAoC,WAAZA,EAAzB,UAAoDA,EAApD,KAAiE,KAF1E,yBAOR,gBAAKsC,UAAU,cAAcK,QApHrB,WACZ5B,IAAAA,IAAU,qBAAsBX,GAC3BY,MAAK,SAAAC,GACEA,EAAIG,KAAKa,SAAW3C,EAAc2C,SAClC1C,EAAwB,CACpB2B,KAAM,yBACN5B,cAAe2B,EAAIG,OAEvB5B,EAAkB,CACd0B,KAAM,cACNO,QAAS,gCAGlBJ,OAAM,SAAAC,IACLC,EAAAA,EAAAA,IAAUD,EAAK9B,OAsGnB,UACI,SAAC,MAAD,W,yKCpLHuD,EAAiB,SAACC,EAAOC,GAClC,MAAwBD,EAAMtC,OAE9BuC,EAAS,CACL/B,KAAM,kBACNgC,IAJJ,EAAQV,KAKJ7B,MALJ,EAAcA,SASLY,EAAY,SAACD,EAAK6B,GAC3B,IAAIC,EAAS,GAET9B,GAAOA,EAAI+B,WACP/B,EAAI+B,SAASjC,MAAQE,EAAI+B,SAASjC,gBAAgBkC,MAClDF,EAAS9B,EAAI+B,SAASjC,KACfE,EAAI+B,SAASE,YACpBH,EAAOI,KAAKlC,EAAI+B,SAASE,aAG7BjC,EAAIG,SAA6B,IAAlB2B,EAAOnB,QACtBmB,EAAOI,KAAKlC,EAAIG,SAEpB0B,EAAc,CACVjC,KAAM,YACNkC,OAAQA,KAIHK,EAAW,yCAAG,WAAOC,EAAOC,EAAYR,GAA1B,uFACjBS,EAAaC,CAAAA,SAAAA,aAAAA,WAAAA,GAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,GAAYC,4BACzB1C,EAAO,IAAI2C,UAEZC,OAAO,OAAQN,GACpBtC,EAAK4C,OAAO,gBAAiB,cAC7B5C,EAAK4C,OAAO,aAAc,WANH,kBASIjD,IAAAA,KAAW6C,EAAYxC,GAT3B,cASb6C,EATa,OAUnBN,EAAW,CACPzC,KAAM,eACNgD,SAAUD,EAAS7C,KAAK+C,MAZT,kBAeZF,EAAS7C,KAAK+C,KAfF,kCAiBnB5C,EAAU,EAAD,GAAQ4B,GAjBE,0DAAH,0DAuBXiB,EAAc,SAACC,GACxB,IAAMC,EAAc,IAAIC,KAAKF,GACvBG,EAAc,IAAID,KAEpBE,EAASD,EAAYE,cAAgBJ,EAAYI,cAErD,OAAKD,EAoBC,GAAN,OAAUA,EAAV,eAnBIA,EAASD,EAAYG,WAAaL,EAAYK,YAiBxC,GAAN,OAAUF,EAAV,gBAfIA,EAASD,EAAYI,SAAWN,EAAYM,UAatC,GAAN,OAAUH,EAAV,cAXIA,EAASD,EAAYK,WAAaP,EAAYO,YASxC,GAAN,OAAUJ,EAAV,eAPIA,EAASD,EAAYM,aAAeR,EAAYQ,cAK1C,GAAN,OAAUL,EAAV,iBAHIA,EAASD,EAAYO,aAAeT,EAAYS,aAC1C,GAAN,OAAUN,EAAV","sources":["hooks/useSingleAndDoubleClick.js","components/Notifications.js","utils.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nfunction useSingleAndDoubleClick(\n    singleClickCb, doubleClickCb,\n    objectId, delay = 250\n) {\n    const [click, setClick] = useState(0);\n\n    useEffect(() => {\n        const timer = setTimeout(() => {\n            // simple click\n            if (click === 1) singleClickCb(objectId);\n            setClick(0);\n        }, delay);\n\n        // the duration between this click and the previous one\n        // is less than the value of delay = double-click\n        if (click === 2) doubleClickCb(objectId);\n\n        return () => clearTimeout(timer);\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [click, objectId]);\n\n    return () => setClick(prev => prev + 1);\n}\n\nexport default useSingleAndDoubleClick;","import { useState, useContext, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { HiRefresh } from 'react-icons/hi';\nimport axios from 'axios';\n\nimport { ProjectContext } from \"../contexts/projectContext\";\nimport { NotificationsContext } from '../contexts/notificationsContext';\nimport { UserContext } from \"../contexts/userContext\";\nimport './styles/Notifications.css';\nimport { erroneous } from \"../utils\";\nimport useSingleAndDoubleClick from \"../hooks/useSingleAndDoubleClick\";\n\nconst Notifications = () => {\n    const { notifications, notificationsDispatcher } = useContext(NotificationsContext);\n    const { projectDispatcher } = useContext(ProjectContext);\n    const { userData } = useContext(UserContext);\n    const navigate = useNavigate();\n\n    const [filteredNotifications, setFilteredNotifications] = useState([]);\n    const [keyword, setKeyword] = useState('');\n    const [nId, setNId] = useState('');\n\n    const config = {\n        headers: {\n            'Content-type': 'application/json',\n            Authorization: `Bearer ${userData.token}`\n        }\n    };\n\n    const filterNotificationByKeyword = (n, keyword) => {\n        const k = keyword.toLowerCase();\n\n        return n.message.toLowerCase().match(k)?.length > 0 ||\n            n.firstName.toLowerCase().match(k)?.length > 0 ||\n            n.email.toLowerCase().match(k)?.length > 0 ||\n            n.dateSent.toLowerCase().match(k)?.length > 0;\n    };\n\n    const handleChange = (e) => setKeyword(e.target.value);\n    const singleClickCb = (id) => {\n        axios.put(`/api/notifications/${id}/view`, {}, config)\n            .then(res => {\n                notificationsDispatcher({\n                    type: 'UPDATE_NOTIFICATION',\n                    notification: res.data\n                });\n                navigate(`/dashboard/notifications/${id}`);\n            })\n            .catch(err => erroneous(err, projectDispatcher));\n    };\n    const doubleClickCb = (id) => {\n        axios.delete(`/api/notifications/${id}`, config)\n            .then(res => {\n                notificationsDispatcher({\n                    type: 'REMOVE_NOTIFICATION',\n                    id: res.data._id\n                });\n                projectDispatcher({\n                    type: 'SET_MESSAGE',\n                    message: `Successfully Deleted Notification with ID ${id}!`\n                })\n            }).catch(err => erroneous(err, projectDispatcher));\n    };\n\n    const handleClick = useSingleAndDoubleClick(singleClickCb, doubleClickCb, nId);\n    const refresh = () => {\n        axios.get('/api/notifications', config)\n            .then(res => {\n                if (res.data.length !== notifications.length) {\n                    notificationsDispatcher({\n                        type: 'SAVE_ALL_NOTIFICATIONS',\n                        notifications: res.data\n                    });\n                    projectDispatcher({\n                        type: 'SET_MESSAGE',\n                        message: 'Refreshed Successfully.'\n                    });\n                }\n            }).catch(err => {\n                erroneous(err, projectDispatcher);\n            });\n    };\n\n    useEffect(() => {\n        switch (keyword) {\n            case '':\n                setFilteredNotifications(notifications);\n                break;\n            case 'viewed':\n                setFilteredNotifications(notifications.filter(\n                    notification => notification.viewed\n                ));\n                break;\n            case 'unread':\n                setFilteredNotifications(notifications.filter(\n                    notification => !notification.viewed\n                ));\n                break;\n            default:\n                try {\n                    const matched = notifications.filter(notification => {\n                        return filterNotificationByKeyword(notification, keyword);\n                    });\n                    setFilteredNotifications(matched);\n                } catch (err) {\n                    erroneous(err, projectDispatcher);\n                }\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [keyword, notifications]);\n\n    return (\n        <section className='notifications-container'>\n            <div className='inbox-filter-card'>\n                <h1>Notifications</h1>\n                <form className='filter-box'>\n                    <input\n                        type='search'\n                        placeholder=\"Filter Notification by Keyword...\"\n                        name='keyword'\n                        value={keyword}\n                        onChange={handleChange}\n                    />\n                    <select name='keyword' onChange={handleChange}\n                        value={keyword}\n                    >\n                        <option value=''>\n                            All\n                        </option>\n                        <option value='unread'>\n                            Unread\n                        </option>\n                        <option value='viewed'>\n                            Viewed\n                        </option>\n                    </select>\n                </form>\n            </div>\n            <p className='notification-count'>\n                <span>{filteredNotifications.length}</span>{' '}\n                Notifications\n            </p>\n            <p className='tooltip'>\n                Click or tap on a notification to view more details about it;\n                Double click or tap to delete\n            </p>\n            <div className='notifications-list'>\n                {filteredNotifications.map(notification => {\n                    return (\n                        <article\n                            className={`notification-card ${!notification.viewed && 'unread'}`}\n                            key={notification._id}\n                            onClick={() => {\n                                setNId(notification._id);\n                                handleClick();\n                            }}\n                        >\n                            <div className='sender-info'>\n                                <span className='name'>{notification.firstName}</span>\n                                <a href={`mailto:${notification.email}`} className='email'>\n                                    {notification.email}\n                                </a>\n                            </div>\n                            <blockquote className='message-summary'>\n                                {notification.message}\n                            </blockquote>\n                            <time>\n                                {`${notification.dateSent.split('T')[0]} | `}\n                                {notification.dateSent.split('T')[1].split('.')[0].slice(0, 5)}\n                            </time>\n                        </article>\n                    );\n                })}\n                {!filteredNotifications.length &&\n                    <p className='no-notification'>\n                        No <span className='highlighted-text'>\n                            {(keyword === 'viewed' || keyword === 'unread') ? `${keyword} ` : ''}\n                        </span> notifications.\n                    </p>\n                }\n            </div>\n            <div className='refresh-btn' onClick={refresh}>\n                <HiRefresh />\n            </div>\n        </section>\n    );\n};\n\nexport default Notifications;","import axios from \"axios\";\n\nexport const updateProperty = (event, dispatch) => {\n    const { name, value } = event.target;\n\n    dispatch({\n        type: 'UPDATE_PROPERTY',\n        key: name,\n        value\n    });\n};\n\nexport const erroneous = (err, errDispatcher) => {\n    let errors = [];\n\n    if (err && err.response) {\n        if (err.response.data && err.response.data instanceof Array) {\n            errors = err.response.data;\n        } else if (err.response.statusText) {\n            errors.push(err.response.statusText);\n        }\n    }\n    if (err.message && errors.length === 0)\n        errors.push(err.message);\n\n    errDispatcher({\n        type: 'SET_ERROR',\n        errors: errors\n    });\n};\n\nexport const uploadImage = async (photo, dispatcher, errDispatcher) => {\n    const UPLOAD_URL = process.env.REACT_APP_UPLOAD_IMAGE_URL;\n    const data = new FormData();\n\n    data.append('file', photo);\n    data.append('upload_preset', 'chiblogger');\n    data.append('cloud_name', 'ovecjoe');\n\n    try {\n        const imageObj = await axios.post(UPLOAD_URL, data);\n        dispatcher({\n            type: 'UPDATE_PHOTO',\n            photoUrl: imageObj.data.url\n        });\n\n        return imageObj.data.url;\n    } catch (error) {\n        erroneous(error, errDispatcher);\n    }\n\n\n};\n\nexport const computeDate = (dateString) => {\n    const dateCreated = new Date(dateString);\n    const presentDate = new Date();\n\n    let result = presentDate.getFullYear() - dateCreated.getFullYear();\n\n    if (!result) {\n        result = presentDate.getMonth() - dateCreated.getMonth();\n        if (!result) {\n            result = presentDate.getDay() - dateCreated.getDay();\n            if (!result) {\n                result = presentDate.getHours() - dateCreated.getHours();\n                if (!result) {\n                    result = presentDate.getMinutes() - dateCreated.getMinutes();\n                    if (!result) {\n                        result = presentDate.getSeconds() - dateCreated.getSeconds();\n                        return `${result} seconds ago`;\n                    }\n                    return `${result} minutes ago`;\n                }\n                return `${result} hours ago`;\n            }\n            return `${result} days ago`;\n        }\n        return `${result} months ago`;\n    }\n    return `${result} years ago`;\n};"],"names":["singleClickCb","doubleClickCb","objectId","delay","useState","click","setClick","useEffect","timer","setTimeout","clearTimeout","prev","useContext","NotificationsContext","notifications","notificationsDispatcher","projectDispatcher","ProjectContext","userData","UserContext","navigate","useNavigate","filteredNotifications","setFilteredNotifications","keyword","setKeyword","nId","setNId","config","headers","Authorization","token","handleChange","e","target","value","handleClick","useSingleAndDoubleClick","id","axios","then","res","type","notification","data","catch","err","erroneous","_id","message","filter","viewed","matched","n","k","toLowerCase","match","length","firstName","email","dateSent","filterNotificationByKeyword","className","placeholder","name","onChange","map","onClick","href","split","slice","updateProperty","event","dispatch","key","errDispatcher","errors","response","Array","statusText","push","uploadImage","photo","dispatcher","UPLOAD_URL","process","REACT_APP_UPLOAD_IMAGE_URL","FormData","append","imageObj","photoUrl","url","computeDate","dateString","dateCreated","Date","presentDate","result","getFullYear","getMonth","getDay","getHours","getMinutes","getSeconds"],"sourceRoot":""}